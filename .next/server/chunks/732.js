"use strict";exports.id=732,exports.ids=[732],exports.modules={86732:(e,t,a)=>{a.r(t),a.d(t,{DEFAULT_MAX_RETRIES:()=>h,DEFAULT_TIMEOUT:()=>m,ENV_CMDS_AUTH_TOKEN:()=>_,ENV_CMDS_FULL_URI:()=>w,ENV_CMDS_RELATIVE_URI:()=>E,Endpoint:()=>n,fromContainerMetadata:()=>I,fromInstanceMetadata:()=>L,getInstanceMetadataEndpoint:()=>N,httpRequest:()=>d,providerConfigFromInit:()=>f});var n,r,o=a(39418),i=a(57310),s=a(20857),c=a(14300),l=a(13685);function d(e){return new Promise((t,a)=>{let n=(0,l.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});n.on("error",e=>{a(Object.assign(new s.k("Unable to connect to instance metadata service"),e)),n.destroy()}),n.on("timeout",()=>{a(new s.k("TimeoutError from instance metadata service")),n.destroy()}),n.on("response",e=>{let{statusCode:r=400}=e;(r<200||300<=r)&&(a(Object.assign(new s.k("Error response received from instance metadata service"),{statusCode:r})),n.destroy());let o=[];e.on("data",e=>{o.push(e)}),e.on("end",()=>{t(c.Buffer.concat(o)),n.destroy()})}),n.end()})}let p=e=>!!e&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,u=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),m=1e3,h=0,f=({maxRetries:e=h,timeout:t=m})=>({maxRetries:e,timeout:t}),v=(e,t)=>{let a=e();for(let n=0;n<t;n++)a=a.catch(e);return a},w="AWS_CONTAINER_CREDENTIALS_FULL_URI",E="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",_="AWS_CONTAINER_AUTHORIZATION_TOKEN",I=(e={})=>{let{timeout:t,maxRetries:a}=f(e);return()=>v(async()=>{let e=await S(),a=JSON.parse(await A(t,e));if(!p(a))throw new o.m("Invalid response received from instance metadata service.");return u(a)},a)},A=async(e,t)=>{process.env[_]&&(t.headers={...t.headers,Authorization:process.env[_]});let a=await d({...t,timeout:e});return a.toString()},y={localhost:!0,"127.0.0.1":!0},g={"http:":!0,"https:":!0},S=async()=>{if(process.env[E])return{hostname:"169.254.170.2",path:process.env[E]};if(process.env[w]){let e=(0,i.parse)(process.env[w]);if(!e.hostname||!(e.hostname in y))throw new o.m(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in g))throw new o.m(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new o.m(`The container metadata credential provider cannot be used unless the ${E} or ${w} environment variable is set`,!1)};var T=a(62551);class b extends o.m{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,b.prototype)}}var D=a(97428);!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(n||(n={}));let M={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(r||(r={}));let C={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:r.IPv4},N=async()=>(0,D.e)(await k()||await O()),k=async()=>(0,T.M)(M)(),O=async()=>{let e=await (0,T.M)(C)();switch(e){case r.IPv4:return n.IPv4;case r.IPv6:return n.IPv6;default:throw Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(r)}`)}},x=(e,t)=>{let a=new Date(Date.now()+1e3*(300+Math.floor(300*Math.random())));t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(a)}.
For more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);let n=e.originalExpiration??e.expiration;return{...e,...n?{originalExpiration:n}:{},expiration:a}},R=(e,t={})=>{let a;let n=t?.logger||console;return async()=>{let t;try{(t=await e()).expiration&&t.expiration.getTime()<Date.now()&&(t=x(t,n))}catch(e){if(a)n.warn("Credential renew failed: ",e),t=x(a,n);else throw e}return a=t,t}},P="/latest/meta-data/iam/security-credentials/",V="AWS_EC2_METADATA_V1_DISABLED",U="ec2_metadata_v1_disabled",$="x-aws-ec2-metadata-token",L=(e={})=>R(K(e),{logger:e.logger}),K=e=>{let t=!1,{logger:a,profile:n}=e,{timeout:r,maxRetries:i}=f(e),s=async(a,r)=>{let i=t||r.headers?.[$]==null;if(i){let t=!1,a=!1,r=await (0,T.M)({environmentVariableSelector:e=>{let t=e[V];if(a=!!t&&"false"!==t,void 0===t)throw new o.m(`${V} not set in env, checking config file next.`);return a},configFileSelector:e=>{let a=e[U];return t=!!a&&"false"!==a},default:!1},{profile:n})();if(e.ec2MetadataV1Disabled||r){let n=[];throw e.ec2MetadataV1Disabled&&n.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),t&&n.push(`config file profile (${U})`),a&&n.push(`process environment variable (${V})`),new b(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${n.join(", ")}].`)}}let s=(await v(async()=>{let e;try{e=await W(r)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},a)).trim();return v(async()=>{let e;try{e=await j(s,r)}catch(e){throw 401===e.statusCode&&(t=!1),e}return e},a)};return async()=>{let e=await N();if(t)return a?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),s(i,{...e,timeout:r});{let n;try{n=(await F({...e,timeout:r})).toString()}catch(n){if(n?.statusCode===400)throw Object.assign(n,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===n.message||[403,404,405].includes(n.statusCode))&&(t=!0),a?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),s(i,{...e,timeout:r})}return s(i,{...e,headers:{[$]:n},timeout:r})}}},F=async e=>d({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),W=async e=>(await d({...e,path:P})).toString(),j=async(e,t)=>{let a=JSON.parse((await d({...t,path:P+e})).toString());if(!p(a))throw new o.m("Invalid response received from instance metadata service.");return u(a)}}};